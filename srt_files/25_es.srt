1
00:00:03,140 --> 00:00:08,160
Bueno, es hora de que salgas y veas el mundo real.

2
00:00:08,650 --> 00:00:14,640
Pero antes de hacer eso, repasemos los conceptos que teníamos, el concepto importante que tuvimos en el curso.

3
00:00:14,960 --> 00:00:23,420
La revisión final incluye la definición de un proceso de desarrollo de software, que se desarrolla de forma iterativa,

4
00:00:23,719 --> 00:00:30,609
la técnica de acumulación, la técnica de historias de usuarios, la técnica de control de versiones, las técnicas de integración continua

5
00:00:30,609 --> 00:00:34,310
y el desarrollo basado en pruebas.

6
00:00:34,460 --> 00:00:39,240
Entonces, en primer lugar, ¿cuál es la definición de un proceso de desarrollo de software?

7
00:00:39,469 --> 00:00:44,920
Es una estructura que se impone al desarrollo de un producto de software que

8
00:00:44,920 --> 00:00:54,450
produce un excelente software funcional, y normalmente implica tener el producto de software desde el principio

9
00:00:54,450 --> 00:01:03,659
hasta el final. Podría ser un producto de software que se usa para vender en línea en un producto digital o físico

10
00:01:03,670 --> 00:01:10,269
o software como un servicio que también podría estar relacionado con esta parte.

11
00:01:10,340 --> 00:01:15,579
Luego tenemos un desarrollo iterativo, que está trabajando en muchos proyectos,

12
00:01:15,579 --> 00:01:22,560
muchos ciclos. También se denominan iteraciones, para promover los comentarios de los clientes y

13
00:01:22,569 --> 00:01:27,829
ofrecer capacidad. Esto es algo muy importante aquí es que necesita

14
00:01:27,829 --> 00:01:35,569
continuar en comunicación constante desde el inicio hasta el lanzamiento o decirle que envíe

15
00:01:35,579 --> 00:01:42,099
su software. Debe continuar manteniendo una comunicación constante con su cliente desde

16
00:01:42,099 --> 00:01:47,290
el comienzo hasta el final del proceso. Entonces el siguiente concepto es la técnica de acumulación.

17
00:01:47,290 --> 00:01:52,780
¿Recuerdas lo que es una acumulación? Bueno, es un gran tablero en su oficina donde puede rastrear el

18
00:01:52,780 --> 00:01:58,290
progreso de sus historias y tareas de usuario. Diferentes personas llaman diferentes nombres a la cartera.

19
00:01:58,299 --> 00:02:06,500
A veces la gente lo llama: el tablero scrum o el tablero de resortes o el tablero grande, por lo que hay diferentes

20
00:02:06,500 --> 00:02:12,419
nombres para la cartera de pedidos. Pero lo que no cambia es que hay tres clases de tareas

21
00:02:12,419 --> 00:02:18,860
en la cartera de pedidos: para hacer historias de usuarios o la canalización,

22
00:02:19,110 --> 00:02:24,530
luego tiene las historias de usuario "haciendo" o "en progreso", y luego tiene el historias de usuario "terminadas" o

23
00:02:24,530 --> 00:02:29,889
"terminadas". Ahora, a muchas personas les gusta incluir la tasa de quemado o

24
00:02:29,889 --> 00:02:37,199
la "tasa de quema de calorías" en la cartera de pedidos. Luego tenemos la técnica de historias de usuario.

25
00:02:37,199 --> 00:02:40,520
¿Recuerdas qué son las historias de los usuarios? De acuerdo, una historia de usuario

26
00:02:40,520 --> 00:02:45,500
es la representación de una tarea individual que el software tiene que hacer.

27
00:02:45,659 --> 00:02:52,120
Se compone de tareas más pequeñas y contiene un título, una descripción, una estimación

28
00:02:52,129 --> 00:02:57,819
y nuestro valor de prioridad. Recuerde que a veces tiene una historia de usuario que solo tiene

29
00:02:57,819 --> 00:03:04,139
dos o tres tareas individuales. Pero hay historias de usuarios realmente colosales que

30
00:03:04,139 --> 00:03:10,069
pueden tener cientos de tareas individuales antes de que se completen.

31
00:03:10,300 --> 00:03:13,000
Luego tenemos la técnica de control de versiones.

32
00:03:13,280 --> 00:03:20,699
VC o control de versiones es una herramienta defensiva. Un repositorio de acceso múltiple que realiza un seguimiento de las diferentes

33
00:03:20,699 --> 00:03:28,430
versiones de su código. Luego tenemos la técnica de integración continua que es una técnica que garantiza

34
00:03:28,430 --> 00:03:34,629
la reducción del impacto del conflicto al reunir una compilación de control de versiones

35
00:03:34,639 --> 00:03:42,319
y probar en un solo proceso repetible. Luego tiene un desarrollo impulsado por pruebas, TDD como es

36
00:03:42,319 --> 00:03:47,319
también conocido. Se trata de escribir pruebas incluso antes de comenzar a escribir

37
00:03:47,319 --> 00:03:52,020
el código que le dará al software su funcionalidad y

38
00:03:52,020 --> 00:03:58,000
le permitirá tener ideas claras, sólidas y específicas sobre lo que su software necesita

39
00:03:58,000 --> 00:04:02,219
. Bueno, desde el fondo de mi corazón, me gustaría decir gracias.

40
00:04:02,219 --> 00:04:06,550
Espero que te hayas divertido tanto tomando este curso como yo al crearlo.

41
00:04:06,870 --> 00:04:11,699
Recuerde que nunca debe dejar de aprender. Espero verte en un curso futuro.

42
00:04:11,750 --> 00:04:17,920
Si necesita algo, puede contactarme en Facebook o LinkedIn en Carlos Arriaga Luna, y

43
00:04:17,920 --> 00:04:26,220
recuerde tomar su examen final. Es muy importante. Deseo que tengas éxito en tu carrera y espero verte en un curso futuro.
